import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
import requests
import hashlib
from datetime import datetime, timedelta
import json
from collections import defaultdict
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

ADMIN_IDS = [YOUR ADMIN ID]
USER_DATA_FILE = 'user_data.json'

BOT_TOKEN = 'YOUR BOT TOKEN'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

class CurrencyRates:
    def __init__(self, cbrf_url: str, crypto_api_url: str, crypto_api_key: str):
        self.cbrf_url = cbrf_url
        self.crypto_api_url = crypto_api_url
        self.crypto_api_key = crypto_api_key
        self.cbrf_cache = {}
        self.crypto_cache = {}
        self.last_update = datetime.now() - timedelta(hours=1)

    def get_fiat_rates(self):
        # –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ —Å CBRF
        logging.info("–ó–∞–ø—Ä–æ—Å –∫ CBRF API\n")
        response = requests.get(self.cbrf_url)
        data = response.json()
        self.cbrf_cache = {key: {'CharCode': value['CharCode'], 'Nominal': value['Nominal'], 'Value': value['Value']} for key, value in data['Valute'].items()}
        self.cbrf_cache['RUB'] = {'CharCode': 'RUB', 'Nominal': 1, 'Value': 1} # –ö–æ—Å—Ç—ã–ª—å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è RUB
        logging.info("CBRF –∫—É—Ä—Å—ã: %s", self.cbrf_cache)

    def get_crypto_rates(self):
        # –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        url = f"{self.crypto_api_url}?fsyms=BTC,ETH,MATIC,SOL,USDT,BNB,TRX,TONCOIN,DOGE,LTC&tsyms=USD,EUR,RUB,BYN,UAH,CNY,JPY,GBP,KZT,UZS,BTC,ETH,MATIC,SOL,USDT,BNB,TRX,TONCOIN,DOGE,LTC"
        logging.info("–ó–∞–ø—Ä–æ—Å –∫ Crypto API\n")
        response = requests.get(url)
        self.crypto_cache = response.json()
        logging.info("Crypto –∫—É—Ä—Å—ã: %s", self.crypto_cache)

    def load_rates(self):
        logging.info("–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...")
        self.get_fiat_rates()
        self.get_crypto_rates()
        self.last_update = datetime.now()
        logging.info("–ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    def get_rates(self):
        if (datetime.now() - self.last_update).total_seconds() > 3600:
            self.load_rates()
            logging.info("–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return self.cbrf_cache, self.crypto_cache

class Userdata:
    def __init__(self):
        self.user_data = self.load_user_data()

    def load_user_data(self):
        try:
            with open(USER_DATA_FILE, 'r') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return defaultdict(lambda: {"interactions": 0, "last_seen": None})

    def save_user_data(self, data):
        with open(USER_DATA_FILE, 'w') as file:
            json.dump(data, file, indent=4)

    def update_user_data(self, user_id):
        today = datetime.now().strftime('%Y-%m-%d')
        if user_id not in self.user_data:
            self.user_data[user_id] = {"interactions": 0, "last_seen": today}
        self.user_data[user_id]["interactions"] += 1
        self.user_data[user_id]["last_seen"] = today
        self.save_user_data(self.user_data)

userdata = Userdata()

currency_rates = CurrencyRates(
    'https://www.cbr-xml-daily.ru/daily_json.js', 
    'https://min-api.cryptocompare.com/data/pricemulti',
    'YOUR CRYPTOCOMPARE API KEY'
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    userdata.update_user_data(message.from_user.id)
    newsurl = "https://t.me/CurbeeNews"
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    howto = InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='howto')
    news = InlineKeyboardButton("üóû –ù–æ–≤–æ—Å—Ç–∏", url=newsurl)
    feedback = InlineKeyboardButton("üí≠ –°–≤—è–∑—å", callback_data='contact')
    keyboard.add(howto, news, feedback)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    await message.reply(
        '''<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n\n–Ø Curbee ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n<i>–ü—Ä–∏–º–µ—Ä: @CurbeeBot 1 USD</i>''', 
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'howto')
async def process_howto_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "üêù <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å Curbee?</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ inline-–∑–∞–ø—Ä–æ—Å —Å 2 –∏–ª–∏ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏\n–≤–∏–¥–∞: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) (–∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞) [–≤–∞–ª—é—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏]\n\n–ö –ø—Ä–∏–º–µ—Ä—É:\n\n<pre>@CurbeeBot 1 USD</pre>–í—ã–≤–µ–¥–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ USD\n<pre>@CurbeeBot 1 ETH RUB</pre>–í—ã–≤–µ–¥–µ—Ç –∫—É—Ä—Å –¥–ª—è 1 ETH –≤ —Ä—É–±–ª—è—Ö\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == 'news')
async def process_news_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        '''üóû –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: @CurbeeNews\n\n–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥—É—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞.\n–ù–∏–∫–∞–∫–æ–≥–æ —Å–ø–∞–º–∞, —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!''',
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == 'contact')
async def process_contact_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        '''–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @CurbeeFBBot\n\n–ü–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º\n–∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!''',
        parse_mode="HTML"
    )

@dp.message_handler(commands=['stats'])
async def get_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    today = datetime.now().strftime('%Y-%m-%d')
    total_users = len(userdata.user_data)
    interactions_today = sum(1 for user in userdata.user_data.values() if user['last_seen'] == today)
    new_users_today = sum(1 for user in userdata.user_data.values() if user['last_seen'] == today and user['interactions'] == 1)

    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üìÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {interactions_today}\n"
        f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {new_users_today}\n"
    )

    await message.reply(stats_message)

@dp.inline_handler()
async def inline_handler(query: InlineQuery):
    userdata.update_user_data(query.from_user.id)
    args = query.query.split()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (2 –∏–ª–∏ 3)
    if len(args) not in [2, 3]:
        return
    try:
        amount = float(args[0])
    except ValueError:
        return

    source_currency = args[1].upper()
    target_currency = args[2].upper() if len(args) == 3 else None

    fiat_symbols = "USD,EUR,RUB,BYN,UAH,CNY,JPY,GBP,KZT,UZS"
    crypto_symbols = "BTC,ETH,MATIC,SOL,USDT,BNB,TRX,TONCOIN,DOGE,LTC"

    # –°–ª–æ–≤–∞—Ä—å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
    alias_map = {
        "TON": "TONCOIN"
    }

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
    source_currency = alias_map.get(source_currency, source_currency)
    if target_currency:
        target_currency = alias_map.get(target_currency, target_currency)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    cbrf_rates = currency_rates.get_rates()[0]
    crypto_rates = currency_rates.get_rates()[1]

    results = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (fiat –∏ crypto)
    if len(args) == 2:
        # –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:
        if source_currency in cbrf_rates:
            base_rate = cbrf_rates[source_currency]['Value'] / cbrf_rates[source_currency]['Nominal']
            for fiat_currency in fiat_symbols.split(','):
                if fiat_currency == 'RUB':
                    converted_amount = amount * base_rate
                else:
                    rate = cbrf_rates[fiat_currency]['Value'] / cbrf_rates[fiat_currency]['Nominal']
                    converted_amount = amount * base_rate / rate
                title = f"{amount} {source_currency} = {converted_amount:.2f} {fiat_currency}"
                message_text = title
                results.append(
                    InlineQueryResultArticle(
                        id=hashlib.md5(title.encode()).hexdigest(),
                        title=title,
                        input_message_content=InputTextMessageContent(message_text=message_text)
                    )
                )

        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:
        elif source_currency in crypto_symbols.split(','):
            for target_currency in fiat_symbols.split(','):
                if target_currency in crypto_rates[source_currency]:
                    rate = crypto_rates[source_currency][target_currency]
                    converted_amount = amount * rate
                    title = f"{amount} {source_currency} = {converted_amount:.2f} {target_currency}"
                    message_text = title
                    results.append(
                        InlineQueryResultArticle(
                            id=hashlib.md5(title.encode()).hexdigest(),
                            title=title,
                            input_message_content=InputTextMessageContent(message_text=message_text)
                        )
                    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (fiat to fiat, crypto to fiat, fiat to crypto, crypto to crypto)
    elif len(args) == 3:
        # –§–∏–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É
        if source_currency in fiat_symbols.split(',') and target_currency in fiat_symbols.split(','):
            source_rate = cbrf_rates[source_currency]['Value'] / cbrf_rates[source_currency]['Nominal']
            target_rate = cbrf_rates[target_currency]['Value'] / cbrf_rates[target_currency]['Nominal']
            converted_amount = amount * source_rate / target_rate
            title = f"{amount} {source_currency} = {converted_amount:.2f} {target_currency}"
            message_text = title
            results.append(
                InlineQueryResultArticle(
                    id=hashlib.md5(title.encode()).hexdigest(),
                    title=title,
                    input_message_content=InputTextMessageContent(message_text=message_text)
                )
            )
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É
        elif source_currency in crypto_symbols.split(',') and target_currency in fiat_symbols.split(','):
            if target_currency in crypto_rates[source_currency]:
                rate = crypto_rates[source_currency][target_currency]
                converted_amount = amount * rate
                title = f"{amount} {source_currency} = {converted_amount:.2f} {target_currency}"
                message_text = title
                results.append(
                    InlineQueryResultArticle(
                        id=hashlib.md5(title.encode()).hexdigest(),
                        title=title,
                        input_message_content=InputTextMessageContent(message_text=message_text)
                    )
                )
        # –§–∏–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        elif source_currency in fiat_symbols.split(',') and target_currency in crypto_symbols.split(','):
            if target_currency in crypto_rates and source_currency in crypto_rates[target_currency]:
                rate = 1 / crypto_rates[target_currency][source_currency]
                converted_amount = amount * rate
                title = f"{amount} {source_currency} = {converted_amount:.8f} {target_currency}"
                message_text = title
                results.append(
                    InlineQueryResultArticle(
                        id=hashlib.md5(title.encode()).hexdigest(),
                        title=title,
                        input_message_content=InputTextMessageContent(message_text=message_text)
                    )
                )
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        elif source_currency in crypto_symbols.split(',') and target_currency in crypto_symbols.split(','):
            if target_currency in crypto_rates[source_currency]:
                rate = crypto_rates[source_currency][target_currency]
                converted_amount = amount * rate
                title = f"{amount} {source_currency} = {converted_amount:.8f} {target_currency}"
                message_text = title
                results.append(
                    InlineQueryResultArticle(
                        id=hashlib.md5(title.encode()).hexdigest(),
                        title=title,
                        input_message_content=InputTextMessageContent(message_text=message_text)
                    )
                )
        else:
            title = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è {source_currency} –∏–ª–∏ {target_currency}."
            message_text = title
            results.append(
                InlineQueryResultArticle(
                    id=hashlib.md5(title.encode()).hexdigest(),
                    title=title,
                    input_message_content=InputTextMessageContent(message_text=message_text)
                )
            )

    await query.answer(results, cache_time=1, is_personal=True)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)